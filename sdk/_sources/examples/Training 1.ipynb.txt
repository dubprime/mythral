{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c79330fa",
   "metadata": {},
   "source": [
    "# Basic PVT Setup and Example"
   ]
  },
  {
   "cell_type": "raw",
   "id": "c4080915",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    " Import :class:`~ia.gaius.agent_client.AgentClient` from module :py:mod:`ia.gaius.agent_client`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a5063878",
   "metadata": {},
   "outputs": [],
   "source": [
    "from ia.gaius.agent_client import AgentClient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f5170111",
   "metadata": {},
   "outputs": [],
   "source": [
    "agent_info = {'name': '',\n",
    "              'domain': 'gaius-api',\n",
    "              'secure': False,\n",
    "              'api_key': 'ABCD-1234'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b4358862",
   "metadata": {},
   "outputs": [],
   "source": [
    "agent = AgentClient(agent_info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cfafe1bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'connection': 'okay', 'agent': 'simple'}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agent.connect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "24716f91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'AUTOLEARN': False,\n",
       " 'PREDICT': True,\n",
       " 'SLEEPING': False,\n",
       " 'emotives': {},\n",
       " 'last_learned_model_name': '',\n",
       " 'models_kb': '{KB| objects: 0}',\n",
       " 'name': 'P1',\n",
       " 'size_WM': 0,\n",
       " 'target': '',\n",
       " 'time': 0,\n",
       " 'vectors_kb': '{KB| objects: 0}'}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agent.show_status()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d4be3778",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'genes': {'always_update_frequencies': False,\n",
       "  'auto_learn_algorithm': 'basic',\n",
       "  'auto_learn_metric': 'WM_size',\n",
       "  'classifier': 'CVC',\n",
       "  'max_predictions': 100,\n",
       "  'near_vector_count': 3,\n",
       "  'persistence': 5,\n",
       "  'predict_on_nth_event': 1,\n",
       "  'quiescence': 3,\n",
       "  'recall_threshold': 0.1,\n",
       "  'smoothness': 3,\n",
       "  'sort_metric': 'potential'}}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agent.get_all_genes(nodes=['P1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f19c9ba9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "aa136e7e",
   "metadata": {},
   "source": [
    "## Iris Dataset Training"
   ]
  },
  {
   "cell_type": "raw",
   "id": "57088ff8",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Train and test on `iris-flowers <https://www.kaggle.com/datasets/arshid/iris-flower-dataset>`_ dataset using the :class:`~ia.gaius.pvt.PerformanceValidationTest` class from :py:mod:`ia.gaius.pvt`. This dataset is stored locally in GDF format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1e3bf9bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "from ia.gaius.pvt import PerformanceValidationTest"
   ]
  },
  {
   "cell_type": "raw",
   "id": "d63d410e",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Configure the test to:\n",
    "    * Conduct a classification test\n",
    "    * Train using an 80/20 training/testing data split\n",
    "    * Use 100% of the dataset (150 records)\n",
    "    * learn after guessing during training phase (test_prediction_strategy = `continuous`)\n",
    "    * Clear All Memory on agent before conducting PVT\n",
    "    * Shuffle the data so it is in random order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7236efd3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num_of_tests      = 1\n",
      "\n",
      "ds_filepath       = ../../../../datasets/iris-flowers/\n",
      "\n",
      "pct_of_ds         = 100\n",
      "\n",
      "pct_res_4_train   = 80\n",
      "\n",
      "summarize_for_single_node status   = False\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pvt = PerformanceValidationTest(agent=agent, ingress_nodes=['P1'], query_nodes=['P1'], num_of_tests=1, pct_of_ds=100, pct_res_4_train=80, \n",
    "                                     test_type='classification', dataset_location='filepath', results_filepath=None, \n",
    "                                     ds_filepath='../../../../datasets/iris-flowers/', test_prediction_strategy='continuous', \n",
    "                                     clear_all_memory_before_training=True, turn_prediction_off_during_training=False, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4b7fca93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Conducting Classification PVT...\n",
      "\n",
      "Conducting Test # 0\n",
      "\n",
      "---------------------\n",
      "\n",
      "Length of Training Set = 120\n",
      "\n",
      "Length of Testing Set  = 30\n",
      "\n",
      "Clearing memory of selected ingress nodes...\n",
      "Initialize labels set...\n",
      "{'P1': set()}\n",
      "Created labels set...\n",
      "Preparing to train agent...\n",
      "train - 0\n",
      "train - 100\n",
      "Finished training agent!\n",
      "test - 0\n",
      "Getting Classification Metrics...\n",
      "Saving results to pvt_results...\n",
      "Plotting Results...\n",
      "-----------------Test#0-P1-Plots-----------------\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----------------Test#0-hive-Plots-----------------\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pvt.conduct_pvt()"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
